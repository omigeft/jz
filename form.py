# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys, re
from PyQt5.QtCore import QMetaObject, QCoreApplication, QRect
from PyQt5.QtGui import QTextOption
from PyQt5.QtWidgets import QApplication, QPushButton, QPlainTextEdit, QLabel, QCheckBox, QWidget, QMainWindow


class Ui_jz(object):
    def setupUi(self, jz):
        jz.setObjectName("jz")
        jz.resize(846, 547)
        jz.setFixedSize(jz.size())
        self.plainTextEdit = QPlainTextEdit(jz)
        self.plainTextEdit.setGeometry(QRect(20, 30, 211, 431))
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.plainTextEdit.setWordWrapMode(QTextOption.NoWrap)
        self.label = QLabel(jz)
        self.label.setGeometry(QRect(20, 10, 72, 15))
        self.label.setObjectName("label")
        self.label_2 = QLabel(jz)
        self.label_2.setGeometry(QRect(240, 10, 72, 15))
        self.label_2.setObjectName("label_2")
        self.plainTextEdit_2 = QPlainTextEdit(jz)
        self.plainTextEdit_2.setGeometry(QRect(240, 30, 591, 431))
        self.plainTextEdit_2.setObjectName("plainTextEdit_2")
        self.plainTextEdit_2.setWordWrapMode(QTextOption.NoWrap)
        self.pushButton = QPushButton(jz)
        self.pushButton.setGeometry(QRect(70, 480, 111, 41))
        self.pushButton.setObjectName("pushButton")
        self.checkBox = QCheckBox(jz)
        self.checkBox.setGeometry(QRect(210, 490, 121, 19))
        self.checkBox.setObjectName("checkBox")
        self.checkBox_2 = QCheckBox(jz)
        self.checkBox_2.setGeometry(QRect(320, 490, 131, 19))
        self.checkBox_2.setObjectName("checkBox_2")
        # self.checkBox_3 = QCheckBox(jz)
        # self.checkBox_3.setGeometry(QRect(430, 490, 151, 19))
        # self.checkBox_3.setObjectName("checkBox_3")
        self.label_3 = QLabel(jz)
        self.label_3.setGeometry(QRect(760, 520, 72, 15))
        self.label_3.setObjectName("label_3")
        self.checkBox_4 = QCheckBox(jz)
        self.checkBox_4.setGeometry(QRect(520, 490, 91, 19))
        self.checkBox_4.setObjectName("checkBox_4")
        self.checkBox_5 = QCheckBox(jz)
        self.checkBox_5.setGeometry(QRect(610, 490, 121, 19))
        self.checkBox_5.setObjectName("checkBox_5")

        self.pushButton.clicked.connect(self.on_click)

        self.retranslateUi(jz)
        QMetaObject.connectSlotsByName(jz)

    def retranslateUi(self, jz):
        _translate = QCoreApplication.translate
        jz.setWindowTitle(_translate("jz", "微程序翻译器"))
        self.label.setText(_translate("jz", "微程序"))
        self.label_2.setText(_translate("jz", "注释"))
        self.pushButton.setText(_translate("jz", "翻译微指令"))
        self.checkBox.setText(_translate("jz", "开头带分号"))
        self.checkBox_2.setText(_translate("jz", "带原微程序"))
        # self.checkBox_3.setText(_translate("jz", "暂未实现"))
        self.label_3.setText(_translate("jz", "作者：wmj"))
        self.checkBox_4.setText(_translate("jz", "字段翻译"))
        self.checkBox_5.setText(_translate("jz", "二进制代码表"))

    def get_text(self):
        return self.plainTextEdit.toPlainText()

    def set_text(self, text):
        self.plainTextEdit_2.setPlainText(text)

    def on_click(self):
        self.plainTextEdit_2.setPlainText(self.translate(self.get_text()))

    def translate(self, text):
        rettxt = ""
        for string in text.split('\n'):
            match = re.search(r"\b[0-9A-F]{6}\b", string)
            if not match:
                rettxt += "[SPACE]\n"
            else:
                if self.checkBox.isChecked():
                    rettxt += '; '
                hex_number = match.group()
                binary_number = bin(int(hex_number, 16))[2:].zfill(24)
                M23 = binary_number[0]
                INTA = binary_number[1]
                WR = binary_number[2]
                RD = binary_number[3]
                IOM = binary_number[4]
                S3_S0 = binary_number[5:9]
                A_seg = binary_number[9:12]
                B_seg = binary_number[12:15]
                C_seg = binary_number[15:18]
                MA5_MA0 = binary_number[18:24]
                if self.checkBox_2.isChecked():
                    raw_instruction = re.search(r"\$M [0-9A-F]{2} [0-9A-F]{6}", string).group()
                    rettxt += raw_instruction + '  '
                # if self.checkBox_3.isChecked():
                #     pass
                if self.checkBox_4.isChecked():
                    if M23: rettxt += 'M23 '
                    if INTA: rettxt += 'INTA '
                    if WR: rettxt += 'WR '
                    if RD: rettxt += 'RD '
                    if IOM: rettxt += 'IOM '
                    else: rettxt += 'MEM '
                    if S3_S0 == '0000': rettxt += 'F=A '
                    elif S3_S0 == '0001': rettxt += 'F=B '
                    elif S3_S0 == '0010': rettxt += 'F=A|B '
                    elif S3_S0 == '0011': rettxt += 'F=A&B'
                    elif S3_S0 == '0100': rettxt += 'F=~A '
                    elif S3_S0 == '0101': rettxt += 'F=A逻辑右移B(取低3位)位 '
                    elif S3_S0 == '0110': rettxt += 'F=A逻辑左移B(取低3位)位 '
                    elif S3_S0 == '0111': rettxt += 'F=A算术右移B(取低3位)位 '
                    elif S3_S0 == '1000': rettxt += 'F=A循环右移B(取低3位)位 '
                    elif S3_S0 == '1001': rettxt += 'F=A加B '
                    elif S3_S0 == '1010': rettxt += 'F=A加B加Cn '
                    elif S3_S0 == '1011': rettxt += 'F=A减B '
                    elif S3_S0 == '1100': rettxt += 'F=A减1 '
                    elif S3_S0 == '1101': rettxt += 'F=A加1 '
                    if A_seg == '000': rettxt += 'NOP '
                    elif A_seg == '001': rettxt += 'LDA '
                    elif A_seg == '010': rettxt += 'LDB '
                    elif A_seg == '011': rettxt += 'LDR0 '
                    elif A_seg == '101': rettxt += 'LOAD '
                    elif A_seg == '110': rettxt += 'LDAR '
                    elif A_seg == '111': rettxt += 'LDIR '
                    if B_seg == '000': rettxt += 'NOP '
                    elif B_seg == '001': rettxt += 'ALU-B '
                    elif B_seg == '010': rettxt += 'RS-B '
                    elif B_seg == '011': rettxt += 'RD-B '
                    elif B_seg == '100': rettxt += 'RI-B '
                    elif B_seg == '101': rettxt += 'SP-B '
                    elif B_seg == '110': rettxt += 'PC-B '
                    if C_seg == '000': rettxt += 'NOP  '
                    elif C_seg == '001': rettxt += 'P<1>  '
                    elif C_seg == '010': rettxt += 'P<2>  '
                    elif C_seg == '011': rettxt += 'P<3>  '
                    elif C_seg == '100': rettxt += 'P<4>  '
                    elif C_seg == '101': rettxt += 'LDPC  '
                    elif C_seg == '110': rettxt += 'STI  '
                    elif C_seg == '111': rettxt += 'CLI  '
                if self.checkBox_5.isChecked():
                    rettxt += ' '.join([M23, INTA, WR, RD, IOM, S3_S0, A_seg, B_seg, C_seg, MA5_MA0])
                rettxt += '\n'
        return rettxt

if __name__ == '__main__':
    app = QApplication(sys.argv)  # 实例化QApplication类，作为GUI主程序入口
    Mainwindow = QMainWindow()  # 创建MainWindow
    ui = Ui_jz()  # 实例UI类
    ui.setupUi(Mainwindow)  # 设置窗体UI
    Mainwindow.show()  # 显示窗体
    sys.exit(app.exec_())  # 当窗口创建完成，需要结束主循环过程